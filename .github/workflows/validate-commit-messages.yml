name: Validate Commit Messages

on:
  push:
  pull_request:

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to get all commits
    
    - name: Validate commit messages
      run: |
        # Determine commit range based on event type
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, validate commits in the PR
          COMMIT_RANGE="${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}"
        else
          # For pushes, determine the range carefully
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # New branch, validate only the latest commit
            COMMIT_RANGE="HEAD~1..HEAD"
          else
            # Check if the before SHA exists in the current repository
            if git cat-file -e "${{ github.event.before }}" 2>/dev/null; then
              # Before SHA exists, validate commits in this push
              COMMIT_RANGE="${{ github.event.before }}..${{ github.event.after }}"
            else
              # Before SHA doesn't exist (force push), validate only the latest commit
              echo "Warning: Before SHA ${{ github.event.before }} not found (likely force push)"
              echo "Falling back to validating only the latest commit"
              COMMIT_RANGE="HEAD~1..HEAD"
            fi
          fi
        fi
        
        echo "Using commit range: $COMMIT_RANGE"
        
        # Ensure script is executable  
        chmod +x ./scripts/validate-commits.sh
        
        # Run the validation script with enhanced debugging
        echo "DEBUG: About to run validation script"
        echo "DEBUG: Script exists: $(ls -la ./scripts/validate-commits.sh)"
        echo "DEBUG: Script permissions: $(stat -c '%a' ./scripts/validate-commits.sh 2>/dev/null || stat -f '%A' ./scripts/validate-commits.sh)"
        
        # Show what commits we're actually validating
        echo "DEBUG: Commits in range:"
        git log --oneline "$COMMIT_RANGE"
        
        # Test the script with a simple operation first
        echo "DEBUG: Testing script basic functionality..."
        ./scripts/validate-commits.sh --help || echo "Help command failed"
        
        # Run the script and capture both stdout and stderr
        echo "DEBUG: Running validation script..."
        set +e  # Don't exit on error so we can capture the exit code
        ./scripts/validate-commits.sh --range "$COMMIT_RANGE" --verbose 2>&1 | tee validation_output.log
        VALIDATION_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "DEBUG: Validation exit code: $VALIDATION_EXIT_CODE"
        echo "DEBUG: Validation output:"
        cat validation_output.log
        
        # Exit with the actual validation exit code
        exit $VALIDATION_EXIT_CODE
